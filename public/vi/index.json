[
{
	"uri": "http://localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu và Tổng quan kiến trúc",
	"tags": [],
	"description": "",
	"content": "Tổng quan kiến trúc Trong workshop này, chúng ta sẽ triển khai một ứng dụng nhà hàng online hoàn chỉnh lên môi trường AWS. Kiến trúc được thiết kế để đảm bảo tính sẵn sàng cao (High Availability), khả năng mở rộng (Scalability), và bảo mật (Security) bằng cách sử dụng các dịch vụ cốt lõi của AWS.\nDưới đây là sơ đồ kiến trúc tổng quan của dự án mà chúng ta sẽ xây dựng:\nCác dịch vụ AWS được sử dụng Dưới đây là danh sách các dịch vụ chính và vai trò của chúng trong dự án này:\nMạng và Bảo mật (Networking \u0026amp; Security) Amazon VPC (Virtual Private Cloud): Là nền tảng mạng cho toàn bộ dự án. Chúng ta sẽ tạo một VPC tên ors-vpc để tạo ra một môi trường mạng riêng biệt, cho phép kiểm soát hoàn toàn dải IP, subnets, và các bảng định tuyến.\nPublic \u0026amp; Private Subnets:\nPublic Subnets: Được sử dụng cho các tài nguyên cần truy cập từ Internet như Application Load Balancer. Private Subnets: Dùng để chứa các tài nguyên nhạy cảm như máy chủ backend EC2 và cơ sở dữ liệu RDS, không cho phép truy cập trực tiếp từ Internet để tăng cường bảo mật. Security Groups: Hoạt động như một tường lửa ảo để kiểm soát lưu lượng truy cập.\nors-sg: Dành cho Web Server, cho phép traffic từ Internet vào cổng 80 (HTTP), 443 (HTTPS) và 5000 (Node.js App), cũng như cổng 22 (SSH) từ IP của bạn để quản trị. ors-db-sg: Dành cho Database, chỉ cho phép kết nối từ các máy chủ thuộc Security Group ors-sg trên cổng 3306 (MySQL), đảm bảo cơ sở dữ liệu được bảo vệ tuyệt đối. Cơ sở dữ liệu (Database) Amazon RDS (Relational Database Service): Cung cấp một cơ sở dữ liệu MySQL được quản lý hoàn toàn. Chúng ta sẽ tạo một instance tên ors-db trong Private Subnet, giúp đơn giản hóa việc vận hành, sao lưu và đảm bảo an toàn. Tính toán và Mở rộng (Compute \u0026amp; Scalability) Amazon EC2 (Elastic Compute Cloud): Cung cấp máy chủ ảo để chạy ứng dụng backend Node.js. Các máy chủ này sẽ được đặt trong Private Subnet.\nAMI (Amazon Machine Image) \u0026amp; Launch Template:\nChúng ta sẽ cấu hình một EC2 instance hoàn chỉnh (cài đặt Node.js, Git,\u0026hellip;) rồi tạo một AMI tên ors-ami. AMI này sau đó được sử dụng trong một Launch Template tên ors-launch-template để làm \u0026ldquo;khuôn mẫu\u0026rdquo; cho việc tạo ra các máy chủ mới một cách tự động và đồng nhất. Application Load Balancer (ALB): Tự động phân phối lưu lượng truy cập từ người dùng đến nhiều máy chủ backend EC2 thông qua một Target Group (ors-target-group). ALB cũng thực hiện kiểm tra sức khỏe (health checks) để đảm bảo chỉ gửi request đến các máy chủ đang hoạt động tốt.\nAuto Scaling Group (ASG): Tự động điều chỉnh số lượng máy chủ EC2 backend dựa trên tải thực tế (ví dụ: số lượng request mỗi phút). Khi lưu lượng tăng, ASG sẽ tự động thêm máy chủ mới và sẽ loại bỏ chúng khi lưu lượng giảm, giúp tối ưu chi phí và đảm bảo hiệu năng.\nLưu trữ và Phân phối nội dung (Storage \u0026amp; Content Delivery) Amazon S3 (Simple Storage Service): Sử dụng để lưu trữ toàn bộ mã nguồn frontend (HTML, CSS, JavaScript, hình ảnh) trong một bucket tên ors-fe. Bucket này sẽ được cấu hình để hoạt động như một trang web tĩnh.\nAmazon CloudFront: Là dịch vụ mạng phân phối nội dung (CDN) giúp tăng tốc độ và bảo mật cho cả frontend và backend.\nFrontend Distribution: Phân phối nội dung tĩnh từ S3. Chúng ta sẽ sử dụng Origin Access Identity (OAI) để khóa S3 bucket, buộc người dùng phải truy cập trang web thông qua CloudFront, tăng cường bảo mật. Backend Distribution: Cung cấp một endpoint HTTPS an toàn cho API, hoạt động như một proxy và chuyển tiếp các yêu cầu đến Application Load Balancer. "
},
{
	"uri": "http://localhost:1313/vi/3-accessibilitytoinstances/3.1-public-instance/",
	"title": "Kết nối, Cài đặt và Triển khai",
	"tags": [],
	"description": "",
	"content": "Hướng dẫn chi tiết các lệnh trên MobaXterm Trong phần này, bạn sẽ thực hiện các lệnh để kết nối vào máy chủ ors-ec2, sau đó cài đặt môi trường và triển khai ứng dụng backend Node.js.\nLưu ý: Các lệnh được thực hiện tuần tự. Hãy đảm bảo bạn đã hoàn thành bước trước rồi mới tiếp tục bước sau.\n1. Kết nối vào EC2 Instance Đây là bước đầu tiên, kết nối từ máy tính của bạn vào máy chủ ors-ec2 trong Public Subnet.\nMở MobaXterm và tạo một phiên SSH mới. Remote host: Nhập địa chỉ Public IPv4 của ors-ec2 (bạn có thể lấy từ EC2 Dashboard). Specify username: ec2-user. Use private key: Chọn file ors-keypair.pem bạn đã tải về. Phân quyền cho file key (nếu dùng Terminal trên macOS/Linux): Trước khi kết nối, bạn cần chạy lệnh này trên máy tính cá nhân để bảo mật file key: chmod 400 ors-keypair.pem Thiết lập phiên SSH trong MobaXterm 2. Cài đặt Môi trường trên Server Khi đã kết nối thành công vào máy chủ, hãy cài đặt các công cụ cần thiết.\nCập nhật hệ thống:\nsudo yum update -y Cập nhật các gói hệ thống Cài đặt Git:\nsudo yum install -y git Sao chép mã nguồn dự án từ GitHub:\ngit clone https://github.com/tuilatri/online-restaurant-system.git Sao chép dự án Di chuyển vào thư mục backend:\ncd online-restaurant-system/backend Cài đặt Node.js và npm:\nsudo dnf install -y nodejs Cài đặt Node.js Kiểm tra phiên bản để xác nhận cài đặt thành công:\nnode -v npm -v 3. Cài đặt và Cấu hình Ứng dụng Cài đặt các thư viện phụ thuộc của dự án:\nnpm install Cài đặt các gói npm Di chuyển vào thư mục src và tạo file cấu hình biến môi trường:\ncd src nano .env Nhập thông tin kết nối cơ sở dữ liệu: Trong trình soạn thảo nano, dán nội dung sau và thay thế bằng thông tin của bạn.\nDB_HOST=\u0026#39;your-rds-endpoint\u0026#39; DB_USER=\u0026#39;admin\u0026#39; DB_PASSWORD=\u0026#39;your-db-password\u0026#39; DB_DATABASE=\u0026#39;ors\u0026#39; DB_PORT=3306 Cấu hình file .env Lưu và thoát khỏi nano:\nNhấn Ctrl + O Nhấn Enter để xác nhận tên file. Nhấn Ctrl + X để thoát. 4. Khởi chạy và Kiểm tra Backend Quay lại thư mục backend gốc:\ncd .. Khởi chạy ứng dụng:\nnpm run start Ứng dụng backend đang chạy trên cổng 5000 Kiểm tra hoạt động của ứng dụng ngay trên máy chủ: Mở một cửa sổ terminal mới trên MobaXterm và kết nối lại vào cùng EC2 instance, sau đó dùng lệnh curl để kiểm tra.\ncurl http://127.0.0.1:5000/api Nếu bạn nhận được phản hồi Welcome to Dining Verse Backend API!, nghĩa là ứng dụng đã chạy thành công!\n5. Hướng dẫn xử lý sự cố (Troubleshooting) Nếu bạn cập nhật code trên GitHub nhưng thay đổi không xuất hiện trên web, hãy làm theo các bước sau trên máy chủ:\nDi chuyển vào thư mục backend:\ncd online-restaurant-system/backend Kéo code mới nhất về:\ngit pull origin main Tìm tiến trình (process) Node.js đang chạy:\nps aux | grep node Dừng tiến trình cũ bằng PID của nó:\nkill -9 \u0026lt;PID\u0026gt; Ví dụ thực tế:\n[ec2-user@ip-10-0-144-101 backend]$ ps aux | grep node\rec2-user 3117 0.0 6.6 1127836 64896 pts/1 Sl+ 10:15 0:00 node server.js\r[ec2-user@ip-10-0-144-101 backend]$ kill -9 3117 Khởi động lại ứng dụng:\nnpm run start "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.1-createvpc/",
	"title": "Tạo VPC và Subnets",
	"tags": [],
	"description": "",
	"content": "Tạo Môi trường Mạng (VPC) ℹ️ Mục tiêu\nTạo một môi trường mạng ảo (VPC) riêng biệt trong AWS cho dự án nhà hàng. Sử dụng trình hướng dẫn \u0026ldquo;VPC and more\u0026rdquo; để tự động thiết lập các thành phần mạng cần thiết, bao gồm Public Subnets, Private Subnets, Internet Gateway, và Route Tables. 🔒 Các bước thực hiện\n1. Truy cập dịch vụ VPC Từ giao diện AWS Management Console, tìm kiếm dịch vụ VPC. Chọn VPC từ kết quả tìm kiếm để truy cập vào trang quản lý VPC. Tìm kiếm dịch vụ VPC 2. Bắt đầu tạo VPC Trong giao diện VPC Dashboard, ở menu bên trái, chọn Your VPCs. Nhấn vào nút Create VPC ở góc trên bên phải. Nhấn nút Create VPC 3. Cấu hình thông số VPC Tại trang Create VPC, trong phần Resources to create, hãy chắc chắn rằng bạn đã chọn VPC and more để sử dụng trình hướng dẫn tạo tự động.\nCấu hình chi tiết:\nName tag auto-generation: ors-vpc IPv4 CIDR block: Để mặc định 10.0.0.0/16. Number of Availability Zones (AZs): 2 Number of Public subnets: 2 Number of Private subnets: 2 NAT gateways: None (Để tiết kiệm chi phí cho workshop này). VPC endpoints: None Cấu hình VPC and more cho dự án Giải thích: Chúng ta tạo ra 2 Public Subnet để đặt các tài nguyên cần truy cập Internet như Load Balancer, và 2 Private Subnet để bảo vệ các tài nguyên nhạy cảm như EC2 backend và cơ sở dữ liệu RDS. Việc trải rộng trên 2 AZ giúp tăng tính sẵn sàng cao (High Availability) cho hệ thống.\n4. Hoàn tất và tạo VPC Sau khi đã điền đầy đủ thông tin, cuộn xuống dưới và nhấn vào Create VPC. Hoàn tất và tạo VPC 5. Kiểm tra kết quả Quá trình tạo các tài nguyên mạng có thể mất vài phút. Sau khi hoàn tất, bạn sẽ thấy màn hình thông báo thành công. Nhấn vào View VPC để xem lại các tài nguyên đã được tạo. Thông báo tạo VPC thành công Bạn sẽ được chuyển đến trang danh sách các VPC. Tại đây, VPC ors-vpc vừa tạo đã ở trạng thái Available, sẵn sàng cho các bước cấu hình tiếp theo. Kiểm tra VPC trong danh sách "
},
{
	"uri": "http://localhost:1313/vi/",
	"title": "Triển khai dự án Nhà hàng Online trên AWS",
	"tags": [],
	"description": "",
	"content": "Triển khai dự án Nhà hàng Online Full-Stack trên AWS Tổng quan Trong workshop này, bạn sẽ được hướng dẫn từng bước để triển khai một ứng dụng nhà hàng online hoàn chỉnh lên nền tảng Amazon Web Services (AWS). Dự án bao gồm một frontend được xây dựng bằng HTML, CSS, và JavaScript, cùng với một backend mạnh mẽ sử dụng Node.js (Express) và cơ sở dữ liệu MySQL (RDS), tạo nên một hệ thống có khả năng mở rộng, an toàn và hiệu suất cao.\nCông nghệ và Dịch vụ sử dụng ℹ️ Mục tiêu của workshop là xây dựng một hạ tầng đám mây chuyên nghiệp, có khả năng chịu lỗi và tự động co giãn để đáp ứng nhu cầu truy cập của người dùng.\n💡 Các dịch vụ AWS chính được sử dụng:\nVPC (Virtual Private Cloud): Tạo một môi trường mạng riêng biệt và an toàn trên AWS, bao gồm Public Subnet cho các tài nguyên cần truy cập internet và Private Subnet để bảo vệ cơ sở dữ liệu. EC2 (Elastic Compute Cloud): Nơi triển khai và chạy ứng dụng backend Node.js. AMI \u0026amp; Launch Templates: Tạo một \u0026ldquo;khuôn mẫu\u0026rdquo; cho máy chủ, giúp tự động hóa việc khởi tạo các EC2 instance mới một cách đồng nhất. Application Load Balancer (ALB): Phân phối lưu lượng truy cập đến nhiều EC2 instance, tăng tính sẵn sàng và khả năng chịu tải của ứng dụng. Auto Scaling Group (ASG): Tự động điều chỉnh số lượng EC2 instance dựa trên lưu lượng truy cập, đảm bảo hiệu suất ổn định và tối ưu chi phí. RDS (Relational Database Service): Cung cấp một cơ sở dữ liệu MySQL được quản lý hoàn toàn, giúp đơn giản hóa việc cài đặt, vận hành và sao lưu. S3 (Simple Storage Service): Lưu trữ và phân phát các tài nguyên tĩnh của frontend (HTML, CSS, JavaScript, hình ảnh). CloudFront: Dịch vụ mạng phân phối nội dung (CDN) giúp tăng tốc độ tải trang cho người dùng trên toàn cầu và bảo mật cho cả frontend và backend. Kiến trúc và Phạm vi ℹ️ Dự án được phân tách rõ ràng thành hai phần: Frontend (giao diện người dùng) và Backend (hệ thống xử lý), được triển khai độc lập nhưng giao tiếp chặt chẽ với nhau qua API.\nBackend (Phía máy chủ)\nỨng dụng Node.js được triển khai trên các EC2 instance nằm trong một Auto Scaling Group. Application Load Balancer sẽ nhận các yêu cầu từ người dùng và chuyển tiếp đến các EC2 instance đang hoạt động. Cơ sở dữ liệu RDS MySQL được đặt trong Private Subnet, chỉ cho phép các EC2 instance truy cập để đảm bảo an toàn tối đa. Một CloudFront distribution được cấu hình để trỏ đến ALB, cung cấp một lớp bảo vệ và tăng tốc cho các API endpoint. 🔒 Frontend (Phía người dùng)\nToàn bộ mã nguồn frontend (các file tĩnh) được tải lên một S3 bucket. S3 bucket này được cấu hình để hoạt động như một trang web tĩnh (Static website hosting). Một CloudFront distribution khác được thiết lập để phục vụ nội dung từ S3 bucket. Việc sử dụng Origin Access Identity (OAI) đảm bảo người dùng chỉ có thể truy cập frontend thông qua CloudFront, không thể truy cập trực tiếp vào S3 bucket. 💡 Hãy cùng bắt đầu xây dựng một hạ tầng mạnh mẽ và chuyên nghiệp cho ứng dụng của bạn trong các phần tiếp theo!\n"
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị và dựng hạ tầng",
	"tags": [],
	"description": "",
	"content": "Trang này cung cấp tổng quan về các bước cần thiết để thiết lập hạ tầng hoàn chỉnh cho dự án nhà hàng trên AWS. Mỗi phần trong danh sách dưới đây sẽ dẫn bạn đến một trang hướng dẫn chi tiết.\nHãy thực hiện tuần tự các bước dưới đây. Việc thiết lập sai thứ tự có thể dẫn đến lỗi cấu hình và các thành phần không thể giao tiếp với nhau.\nNội dung chính của chương Cấu hình Môi trường Mạng (VPC)\nTạo VPC và Subnets Chỉnh sửa Public Subnet Thiết lập các Lớp Bảo mật (Security Group)\nTạo Security Groups cho Web Server và Database Khởi tạo Máy chủ và Cơ sở dữ liệu\nTạo EC2 Instance ban đầu để cấu hình Tạo Cơ sở dữ liệu RDS MySQL (Lưu ý: Bước tạo RDS đã được thêm vào đây để đảm bảo luồng workshop liền mạch) Chuẩn bị cho việc Tự động Mở rộng (Automation)\nTạo Amazon Machine Image (AMI) từ EC2 đã cấu hình Tạo Launch Template cho Auto Scaling Group Thiết lập Cân bằng tải (Load Balancer)\nTạo Target Group Tạo Application Load Balancer (ALB) Cấu hình Tự động Mở rộng (Auto Scaling)\nTạo Auto Scaling Group (ASG) Lưu trữ và Phân phối Nội dung (Storage \u0026amp; CDN)\nTạo S3 Bucket cho Frontend Tạo CloudFront cho Backend (trỏ tới ALB) Tạo CloudFront cho Frontend (trỏ tới S3) "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.2-modifysubnet/",
	"title": "Chỉnh sửa Public Subnet",
	"tags": [],
	"description": "",
	"content": "Cấu hình Auto-assign Public IP cho Public Subnet ℹ️ Mục tiêu\nKích hoạt tính năng tự động gán địa chỉ IP công cộng (Public IP) cho các EC2 instance được khởi chạy trong Public Subnet. Đây là bước bắt buộc để chúng ta có thể truy cập và cấu hình máy chủ ban đầu từ Internet thông qua SSH. 🔒 Các bước thực hiện\n1. Truy cập trang quản lý Subnet Từ giao diện VPC Dashboard, chọn Subnets ở menu bên trái để xem danh sách tất cả các subnet thuộc VPC ors-vpc của bạn. Danh sách các Subnet của vpc-ors 2. Chỉnh sửa Public Subnet đầu tiên Xác định và chọn một trong hai Public Subnet đã tạo (ví dụ: ors-vpc-subnet-public1-ap-southeast-1a). Nhấn vào nút Actions và chọn Edit subnet settings. Chọn Edit subnet settings 3. Kích hoạt tính năng Auto-assign IP Trong trang Edit subnet settings, tìm đến mục Auto-assign IP settings. Tích vào ô Enable auto-assign public IPv4 address. Cuộn xuống dưới và nhấn Save để lưu lại thay đổi. Kích hoạt tính năng Auto-assign Public IP Khi tính năng này được bật, bất kỳ EC2 instance nào được khởi chạy trong subnet này sẽ tự động nhận được một địa chỉ IP công cộng, giúp nó có thể giao tiếp với Internet.\n4. Lặp lại cho Public Subnet còn lại Thực hiện lại các bước 2 và 3 cho Public Subnet thứ hai (ví dụ: ors-vpc-subnet-public2-ap-southeast-1b). Việc này đảm bảo rằng hệ thống của chúng ta có thể hoạt động đồng đều trên cả hai Availability Zone, duy trì tính sẵn sàng cao. Hoàn tất cấu hình cho cả hai Public Subnet "
},
{
	"uri": "http://localhost:1313/vi/3-accessibilitytoinstances/",
	"title": "Kết nối và Triển khai Ứng dụng",
	"tags": [],
	"description": "",
	"content": "Sau khi đã xây dựng xong toàn bộ hạ tầng trên AWS, bước tiếp theo là kết nối vào máy chủ EC2, cài đặt môi trường cần thiết, và triển khai mã nguồn ứng dụng backend.\nVì máy chủ ors-ec2 ban đầu của chúng ta được đặt trong Public Subnet và đã được gán một IP công cộng, chúng ta có thể kết nối trực tiếp vào nó từ máy tính cá nhân bằng SSH để thực hiện các tác vụ cài đặt.\nQuy trình trong chương này sẽ bao gồm:\nKết nối vào EC2 instance bằng tệp .pem đã tạo. Cài đặt các công cụ cần thiết như Git, Node.js. Tải mã nguồn dự án từ GitHub về máy chủ. Cấu hình biến môi trường để kết nối tới cơ sở dữ liệu RDS. Chạy ứng dụng backend và kiểm tra hoạt động. Trong chương này, MobaXterm sẽ là công cụ SSH client chính được sử dụng trên Windows để thực hiện các kết nối và chạy các dòng lệnh. Bạn cũng có thể sử dụng các công cụ khác như Terminal (macOS/Linux) hoặc PuTTY.\n"
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.3-createsg/",
	"title": "Tạo Security Groups",
	"tags": [],
	"description": "",
	"content": "Tạo các Lớp Bảo mật (Security Group) ℹ️ Mục tiêu\nSecurity Group hoạt động như một bức tường lửa ảo ở cấp độ instance để kiểm soát lưu lượng truy cập ra vào. Trong phần này, chúng ta sẽ tạo ra 2 Security Group riêng biệt cho hai thành phần cốt lõi trong kiến trúc: Web Server (ors-sg): Nhận lưu lượng truy cập từ người dùng và cho phép quản trị viên kết nối vào. Database (ors-db-sg): Chỉ cho phép kết nối từ Web Server và quản trị viên, đảm bảo an toàn tuyệt đối cho dữ liệu. 🔒 Các bước thực hiện\n1. Tạo Security Group cho Web Server (ors-sg) Đây là lớp bảo vệ cho các máy chủ EC2 sẽ chạy ứng dụng backend Node.js.\nBước 1: Bắt đầu tạo Security Group\nTừ giao diện VPC Dashboard, chọn Security Groups ở menu bên trái. Nhấn vào Create security group. Tạo Security Group mới Bước 2: Cấu hình thông tin cơ bản\nSecurity group name: ors-sg Description: Security group for Online Restaurant Web Server VPC: Chọn VPC ors-vpc đã tạo ở bước trước. Thông tin cơ bản của Web Server SG Bước 3: Thiết lập Inbound Rules (Luồng truy cập vào)\nTrong mục Inbound rules, nhấn Add rule và cấu hình 4 quy tắc sau: Type Protocol Port range Source Description SSH TCP 22 My IP Cho phép bạn kết nối SSH từ IP hiện tại để quản lý máy chủ. HTTP TCP 80 Anywhere-IPv4 Cho phép người dùng truy cập web server qua HTTP. HTTPS TCP 443 Anywhere-IPv4 Cho phép người dùng truy cập an toàn qua HTTPS. Custom TCP TCP 5000 Anywhere-IPv4 Mở cổng cho ứng dụng Node.js (dùng cho kiểm tra và cân bằng tải). Cấu hình Inbound Rules cho Web Server SG Khi chọn Source là My IP, AWS sẽ tự động điền địa chỉ IP công cộng của bạn. Điều này giúp tăng cường bảo mật bằng cách chỉ cho phép quản trị viên truy cập từ một địa điểm tin cậy.\nBước 4: Cuộn xuống dưới cùng và nhấn Create security group. 2. Tạo Security Group cho Database (ors-db-sg) Lớp bảo vệ này được thiết kế để \u0026ldquo;khóa\u0026rdquo; cơ sở dữ liệu, chỉ cho phép các kết nối thực sự cần thiết.\nBước 1: Cấu hình thông tin cơ bản\nNhấn Create security group một lần nữa. Security group name: ors-db-sg Description: Security group for Online Restaurant Database VPC: Chọn VPC ors-vpc. Thông tin cơ bản của Database SG Bước 2: Thiết lập Inbound Rules\nNhấn Add rule và cấu hình 2 quy tắc sau: Type Protocol Port range Source Description MYSQL/Aurora TCP 3306 Custom -\u0026gt; ors-sg Quan trọng: Chỉ cho phép các máy chủ web (thuộc ors-sg) kết nối tới DB. MYSQL/Aurora TCP 3306 My IP Cho phép bạn kết nối vào DB từ máy cá nhân để quản lý (ví dụ: dùng MySQL Workbench). Nguyên tắc bảo mật quan trọng: Bằng cách chọn một Security Group khác (ors-sg) làm Source, chúng ta tạo ra một quy tắc động. Bất kỳ máy chủ nào thuộc ors-sg đều có thể kết nối tới cơ sở dữ liệu mà không cần phải chỉ định địa chỉ IP cụ thể. Đây là cách làm tốt nhất để bảo mật trong môi trường đám mây.\nCấu hình Inbound Rules cho Database SG Bước 3: Nhấn Create security group. Sau khi hoàn thành, bạn sẽ có 2 Security Group đã được cấu hình chính xác và sẵn sàng để bảo vệ các tài nguyên của dự án.\n"
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.4-createec2/",
	"title": "Tạo EC2 Instance ban đầu",
	"tags": [],
	"description": "",
	"content": "Khởi tạo EC2 Instance ban đầu để cấu hình ℹ️ Mục tiêu\nKhởi tạo một máy chủ ảo (EC2 Instance) đầu tiên, đặt tên là ors-ec2. Máy chủ này sẽ được đặt trong Public Subnet để chúng ta có thể truy cập, cài đặt môi trường (Node.js, Git,\u0026hellip;) và cấu hình ứng dụng. Sau khi hoàn tất, instance này sẽ được dùng làm \u0026ldquo;khuôn mẫu\u0026rdquo; để tạo AMI (Amazon Machine Image) cho việc tự động mở rộng sau này. 🔒 Các bước thực hiện\n1. Bắt đầu khởi tạo Instance Trong giao diện AWS Management Console, tìm và chọn dịch vụ EC2. Từ EC2 Dashboard, nhấn vào nút Launch instance. Bắt đầu Launch Instance từ EC2 Dashboard 2. Đặt tên và chọn AMI Name: ors-ec2 Application and OS Images (Amazon Machine Image): Chọn Amazon Linux. Đây là hệ điều hành được tối ưu cho AWS và tương thích tốt với các công cụ chúng ta sẽ sử dụng. Đặt tên và chọn Amazon Machine Image 3. Chọn loại Instance Instance type: Chọn t2.micro. Loại instance này thuộc chương trình Free Tier của AWS, phù hợp cho việc học tập và phát triển. 4. Tạo Key Pair để truy cập Đây là bước cực kỳ quan trọng để có thể kết nối vào máy chủ qua SSH. Trong mục Key pair (login), nhấn vào Create new key pair. Key pair name: ors-keypair Key pair type: RSA Private key file format: .pem (dùng cho MobaXterm hoặc Terminal trên macOS/Linux). Nhấn Create key pair và trình duyệt sẽ tự động tải về file ors-keypair.pem. QUAN TRỌNG: Hãy lưu trữ file .pem này ở một nơi an toàn và không bao giờ chia sẻ nó. Bạn sẽ không thể tải lại file này lần thứ hai. Nếu làm mất, bạn sẽ mất quyền truy cập vào EC2 instance.\nTạo Key Pair mới để truy cập an toàn 5. Cấu hình Network Settings Nhấn vào nút Edit ở mục Network settings. VPC: Chọn ors-vpc đã tạo. Subnet: Chọn một trong hai Public Subnet đã cấu hình (ví dụ: ors-vpc-subnet-public1-ap-southeast-1a). Auto-assign public IP: Enable. (Đây là lý do chúng ta đã cấu hình subnet ở bước 2.2). Firewall (security groups): Chọn Select existing security group. Trong danh sách Common security groups, chọn ors-sg mà chúng ta đã tạo ở bước 2.3. Cấu hình mạng chi tiết cho EC2 instance 6. Khởi tạo và kiểm tra Instance Kiểm tra lại các thông tin đã cấu hình trong bảng Summary ở bên phải. Nhấn Launch instance. Sau khi khởi tạo thành công, bạn có thể nhấn View all instances để xem máy chủ ors-ec2 của mình. Thông báo khởi tạo Instance thành công Đợi một vài phút cho đến khi cột Status check chuyển thành 2/2 checks passed. Lúc này, máy chủ của bạn đã sẵn sàng để kết nối. Kiểm tra EC2 instance trong danh sách "
},
{
	"uri": "http://localhost:1313/vi/4-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "\rCỰC KỲ QUAN TRỌNG: Đây là bước bắt buộc sau khi bạn hoàn thành workshop. Việc không dọn dẹp tài nguyên sẽ khiến tài khoản AWS của bạn tiếp tục phát sinh chi phí, đặc biệt là với các dịch vụ như NAT Gateway, Application Load Balancer và EC2.\nĐể đảm bảo không bỏ sót, chúng ta phải xóa các tài nguyên theo thứ tự ngược lại với lúc tạo ra chúng.\n🔒 Các bước thực hiện\n1. Xóa CloudFront Distributions Bạn cần xóa cả 2 distribution đã tạo cho Frontend (S3) và Backend (ALB).\nTruy cập dịch vụ CloudFront. Chọn một distribution, nhấn Disable và xác nhận. Sau khi distribution đã được disable, chọn lại nó và nhấn Delete. Lặp lại quá trình cho distribution còn lại. 2. Xóa Auto Scaling Group Thao tác này sẽ tự động xóa luôn EC2 instance do ASG quản lý.\nTruy cập dịch vụ EC2 -\u0026gt; Auto Scaling Groups. Chọn project-backend-asg và nhấn Delete. Nhập delete để xác nhận và hoàn tất. 3. Xóa Application Load Balancer Truy cập EC2 -\u0026gt; Load Balancers. Chọn project-backend-alb, vào Actions và chọn Delete load balancer. Nhập confirm để xác nhận. 4. Xóa Target Group Truy cập EC2 -\u0026gt; Target Groups. Chọn project-backend-target-group, vào Actions và chọn Delete. 5. Chấm dứt (Terminate) các EC2 Instance còn lại Cần xóa thủ công các instance không thuộc ASG.\nTruy cập EC2 -\u0026gt; Instances. Chọn các instance project-bastion-host-ec2 và project-backend-ec2 (nếu nó chưa bị ASG xóa). Chọn Instance state -\u0026gt; Terminate instance. 6. Xóa Launch Template Truy cập EC2 -\u0026gt; Launch Templates. Chọn project-backend-lauch-template, vào Actions và chọn Delete template. 7. Xóa AMI và Snapshot liên quan Bước 1: Hủy đăng ký AMI Truy cập EC2 -\u0026gt; AMIs. Chọn project-backend-ec2-ami, vào Actions và chọn Deregister AMI. Bước 2: Xóa Snapshot Truy cập EC2 -\u0026gt; Snapshots. Tìm Snapshot được tạo bởi AMI (thường có mô tả chứa ID của AMI), chọn nó và nhấn Actions -\u0026gt; Delete snapshot. 8. Xóa S3 Bucket Bạn phải xóa hết các đối tượng bên trong bucket trước.\nTruy cập dịch vụ S3. Vào bucket project-frontend-030925. Chọn tất cả các file và nhấn Delete. Sau khi bucket đã trống, quay ra ngoài, chọn bucket và nhấn Delete. 9. Xóa VPC Đây là bước cuối cùng, sẽ xóa VPC và các tài nguyên con như Subnet, Route Table, Internet Gateway, và quan trọng nhất là NAT Gateway.\nTruy cập dịch vụ VPC. Chọn Your VPCs, chọn project-vpc. Nhấn Actions -\u0026gt; Delete VPC. Một cửa sổ sẽ hiện ra liệt kê các tài nguyên sẽ bị xóa. Nhập delete và xác nhận. 10. Xóa Key Pair Truy cập EC2 -\u0026gt; Key Pairs. Chọn project-keypair, vào Actions và chọn Delete. "
},
{
	"uri": "http://localhost:1313/vi/5-conclusion/",
	"title": "Kết Luận và Hướng phát triển",
	"tags": [],
	"description": "",
	"content": "Chúc mừng bạn đã hoàn thành workshop!\nBạn đã thành công xây dựng và triển khai một kiến trúc ứng dụng web full-stack hiện đại, có khả năng co giãn, tính sẵn sàng cao và bảo mật trên nền tảng AWS. Đây không chỉ là một bài thực hành đơn thuần mà là một nền tảng vô cùng vững chắc, mô phỏng lại cách các hệ thống thực tế được xây dựng trên đám mây.\nBằng việc kết hợp các dịch vụ như VPC, EC2, Auto Scaling Group, ALB, RDS, S3 và CloudFront, bạn đã tạo ra một hệ thống mạnh mẽ có thể đáp ứng được lượng truy cập biến đổi trong thực tế.\nNâng cấp và Mở rộng Dự án Kiến trúc hiện tại là một khởi đầu tuyệt vời. Dưới đây là những hướng cải tiến tiềm năng mà bạn có thể khám phá để làm cho hệ thống này trở nên tốt hơn, tự động hơn và chuyên nghiệp hơn nữa.\n1. Tự động hóa Triển khai với CI/CD Pipeline Vấn đề: Hiện tại, quy trình cập nhật code đang được làm thủ công (SSH vào server, git pull, kill process cũ, npm start). Quy trình này tốn thời gian, dễ gây lỗi và không phù hợp cho môi trường chuyên nghiệp. Giải pháp: Xây dựng một đường ống CI/CD (Continuous Integration/Continuous Deployment) với các dịch vụ như AWS CodePipeline, AWS CodeBuild và AWS CodeDeploy. Với CI/CD, mỗi khi bạn đẩy code mới lên GitHub, hệ thống sẽ tự động build, kiểm thử và triển khai phiên bản mới lên các máy chủ EC2 mà không cần bất kỳ sự can thiệp thủ công nào. 2. Quản lý Hạ tầng bằng Mã lệnh (Infrastructure as Code - IaC) Vấn đề: Việc thiết lập toàn bộ hạ tầng bằng tay qua AWS Console (còn gọi là ClickOps) rất khó để tái tạo một cách chính xác và không có khả năng quản lý phiên bản. Giải pháp: Học cách sử dụng các công cụ IaC như AWS CloudFormation hoặc Terraform. Bạn có thể định nghĩa toàn bộ kiến trúc (VPC, EC2, ALB, S3, v.v.) trong các tệp mã lệnh. Điều này cho phép bạn tạo lại, cập nhật hoặc xóa toàn bộ môi trường chỉ bằng một vài dòng lệnh, đảm bảo tính nhất quán và tự động hóa. 3. Container hóa Ứng dụng với Docker và ECS Vấn đề: Việc cài đặt môi trường trực tiếp trên EC2 có thể dẫn đến sự không đồng nhất giữa môi trường phát triển và sản phẩm. Giải pháp: \u0026ldquo;Đóng gói\u0026rdquo; ứng dụng Node.js của bạn vào một Docker container. Sau đó, thay vì chạy trên EC2, bạn có thể triển khai container này lên Amazon ECS (Elastic Container Service). ECS sẽ giúp bạn quản lý, mở rộng và vận hành các container một cách dễ dàng và hiệu quả hơn. 4. Sử dụng Tên miền Riêng với Amazon Route 53 Vấn đề: Người dùng đang truy cập ứng dụng qua các tên miền mặc định, dài và khó nhớ của CloudFront. Giải pháp: Sử dụng Amazon Route 53, dịch vụ DNS của AWS, để đăng ký một tên miền riêng (ví dụ: my-cool-restaurant.com) và trỏ nó đến các CloudFront distribution của bạn. Bạn cũng có thể sử dụng AWS Certificate Manager (ACM) để cấp chứng chỉ SSL/TLS miễn phí cho tên miền của mình. 5. Giám sát, Ghi log và Cảnh báo với Amazon CloudWatch Vấn đề: Làm sao để biết ứng dụng đang hoạt động tốt hay đang gặp lỗi? Khi nào Auto Scaling kích hoạt? Giải pháp: Tích hợp sâu hơn với Amazon CloudWatch. Bạn có thể: CloudWatch Logs: Thu thập log từ ứng dụng Node.js trên EC2 để gỡ lỗi. CloudWatch Metrics: Theo dõi các chỉ số hiệu năng quan trọng như CPU Utilization của EC2, Request Count của ALB. CloudWatch Alarms: Thiết lập các cảnh báo tự động gửi email cho bạn khi có sự cố xảy ra (ví dụ: CPU quá tải, website không thể truy cập). 6. Tăng cường Bảo mật với AWS WAF Vấn đề: Ứng dụng có thể bị tấn công bởi các lỗ hổng web phổ biến như SQL injection hoặc cross-site scripting (XSS). Giải pháp: Tích hợp AWS WAF (Web Application Firewall) với CloudFront. WAF giúp bảo vệ ứng dụng của bạn bằng cách lọc và chặn các lưu lượng truy cập độc hại dựa trên các quy tắc bạn định nghĩa. "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.5-createrds/",
	"title": "Tạo Cơ sở dữ liệu RDS MySQL",
	"tags": [],
	"description": "",
	"content": "Khởi tạo Cơ sở dữ liệu với Amazon RDS ℹ️ Mục tiêu\nTạo một cơ sở dữ liệu MySQL được quản lý bằng dịch vụ Amazon RDS. Đặt cơ sở dữ liệu này vào trong môi trường mạng VPC (ors-vpc) đã tạo và bảo vệ nó bằng Security Group (ors-db-sg). Sử dụng Free Tier để tiết kiệm chi phí trong quá trình thực hành workshop. 🔒 Các bước thực hiện\n1. Truy cập dịch vụ RDS Từ giao diện AWS Management Console, tìm kiếm và chọn dịch vụ RDS. Tìm kiếm dịch vụ RDS 2. Bắt đầu tạo Database Trong RDS Dashboard, nhấn vào nút Create database. Nhấn Create database 3. Cấu hình Engine và Template Choose a database creation method: Chọn Standard create. Engine options: Chọn MySQL. Templates: Chọn Free tier. Việc chọn Free tier sẽ tự động giới hạn các tùy chọn cấu hình (ví dụ: chỉ có thể chọn Single DB instance) để đảm bảo bạn không phát sinh chi phí ngoài ý muốn.\nChọn Standard create, MySQL và Free Tier 4. Cấu hình Settings DB instance identifier: ors-db Master username: admin Master password: Nhập mật khẩu của bạn (ví dụ: 0812-haminhtri). Confirm password: Nhập lại mật khẩu. Cấu hình thông tin đăng nhập cho Database 5. Cấu hình Connectivity (Kết nối) Đây là bước quan trọng để đặt cơ sở dữ liệu vào đúng môi trường mạng.\nVirtual private cloud (VPC): Chọn ors-vpc. DB Subnet Group: Để mặc định, AWS sẽ tự động tạo một Subnet Group mới phù hợp với VPC của bạn. Public access: Chọn Yes. VPC security group (firewall): Chọn Choose existing. Existing VPC security groups: Xóa Security Group default và chọn ors-db-sg. Lý do chọn Public access = Yes: Trong workshop này, chúng ta cần kết nối tới database từ máy tính cá nhân (sử dụng MySQL Workbench) để import dữ liệu ban đầu. Việc này được bảo mật bởi Security Group ors-db-sg, vốn chỉ cho phép truy cập từ IP của bạn (quy tắc My IP đã tạo ở bước 2.3). Trong môi trường Production thực tế, bạn nên chọn No và truy cập thông qua một Bastion Host.\nCấu hình kết nối mạng cho RDS 6. Cấu hình Additional Configuration Mở rộng mục Additional configuration. Initial database name: ors Đây chính là tên schema (cơ sở dữ liệu) ban đầu mà ứng dụng sẽ sử dụng. Đặt tên cho schema ban đầu 7. Hoàn tất, tạo và kiểm tra Cuộn xuống dưới cùng và nhấn Create database. Quá trình khởi tạo database có thể mất từ 5 đến 10 phút. Hãy đợi cho đến khi cột Status chuyển sang Available. Đợi Database được tạo Sau khi hoàn tất, nhấn vào instance ors-db vừa tạo. Trong tab Connectivity \u0026amp; security, tìm và sao chép lại giá trị Endpoint. Đây chính là địa chỉ để kết nối tới cơ sở dữ liệu của bạn. Lấy thông tin Endpoint để kết nối "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.6-createami/",
	"title": "Tạo Amazon Machine Image (AMI)",
	"tags": [],
	"description": "",
	"content": "Tạo AMI từ EC2 Instance đã cấu hình ℹ️ Mục tiêu\nAmazon Machine Image (AMI) là một bản \u0026ldquo;snapshot\u0026rdquo; hay một bản sao lưu hoàn chỉnh của một EC2 instance, bao gồm hệ điều hành, các phần mềm đã cài đặt, và toàn bộ cấu hình. Mục đích của việc tạo AMI trong workshop này là để có một \u0026ldquo;khuôn mẫu\u0026rdquo; chuẩn cho máy chủ web. Khuôn mẫu này sẽ được Launch Template và Auto Scaling Group sử dụng ở các bước sau để tự động tạo ra các bản sao y hệt của máy chủ khi cần mở rộng quy mô. 🔒 Các bước thực hiện\n1. Chọn EC2 Instance nguồn Trong EC2 Dashboard, điều hướng đến Instances. Từ danh sách, chọn instance ors-ec2 mà bạn đã tạo và sẽ cấu hình ở các bước sau. Chọn EC2 instance ors-ec2 làm nguồn 2. Bắt đầu quá trình tạo Image Sau khi đã chọn instance, nhấn vào menu Actions. Chọn Image and templates. Chọn Create image. Bắt đầu tạo Image từ menu Actions 3. Cấu hình thông tin cho AMI Tại trang Create image, điền các thông tin sau: Image name: ors-ami Image description: ors-ami Các tùy chọn khác có thể để mặc định. Việc này đảm bảo AMI sẽ giữ lại toàn bộ cấu hình của instance gốc. Điền thông tin cấu hình cho AMI 4. Hoàn tất và kiểm tra trạng thái Cuộn xuống dưới và nhấn Create image. Bạn sẽ nhận được thông báo rằng yêu cầu tạo AMI đã được gửi đi thành công. Thông báo yêu cầu tạo AMI thành công Để theo dõi tiến trình: Ở menu bên trái, dưới mục Images, chọn AMIs. Bạn sẽ thấy AMI ors-ami đang ở trạng thái pending. Quá trình này có thể mất vài phút. Hãy đợi cho đến khi cột Status chuyển sang Available. Kiểm tra trạng thái AMI đã chuyển sang Available Tuyệt vời! Bạn đã tạo thành công một khuôn mẫu máy chủ hoàn chỉnh. Bất kỳ EC2 instance nào được tạo từ AMI này sẽ có sẵn mọi thứ bạn đã cài đặt, sẵn sàng để phục vụ người dùng ngay lập tức.\n"
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.7-createlaunchtemplate/",
	"title": "Tạo Launch Template",
	"tags": [],
	"description": "",
	"content": "Khởi tạo Launch Template ℹ️ Mục tiêu\nLaunch Template hoạt động như một \u0026ldquo;bản thiết kế\u0026rdquo; chi tiết cho việc khởi tạo EC2 instance. Nó lưu trữ tất cả các thông số cấu hình cần thiết như AMI, loại instance, key pair, và security group. Mục đích của chúng ta là tạo một Launch Template sử dụng AMI của máy chủ web (ors-ami) đã tạo ở bước trước. Auto Scaling Group sẽ dựa vào bản thiết kế này để tự động khởi chạy các instance mới một cách đồng nhất và chính xác. 🔒 Các bước thực hiện\n1. Truy cập Launch Templates Từ EC2 Dashboard, ở menu bên trái, cuộn xuống mục Instances và chọn Launch Templates. Nhấn vào Create launch template. Bắt đầu tạo Launch Template 2. Cấu hình thông tin cơ bản Launch template name: ors-launch-template Template version description: Launch template for Online Restaurant System servers Điền thông tin cơ bản cho Launch Template 3. Chọn AMI (Amazon Machine Image) Trong mục Application and OS Images (Amazon Machine Image), chọn tab My AMIs. Chọn Owned by me và bạn sẽ thấy AMI ors-ami đã tạo ở bước trước. Hãy chọn nó. Chọn AMI ors-ami đã tạo 4. Chọn Instance Type và Key Pair Instance type: Chọn t2.micro. Key pair (login): Chọn ors-keypair từ danh sách thả xuống. Chọn loại Instance và Key Pair 5. Cấu hình Network Settings Trong mục Network settings, chúng ta không cần chọn Subnet, vì Auto Scaling Group sẽ tự quyết định điều này. Tuy nhiên, chúng ta cần chỉ định Security Group. Security groups: Chọn Select existing security group. Trong danh sách Common security groups, chọn ors-sg. Cấu hình Security Group cho Launch Template 6. Hoàn tất và xem lại Launch Template Kiểm tra lại tất cả các thông tin đã cấu hình trong bảng Summary bên phải. Cuộn xuống dưới và nhấn Create launch template. Hoàn tất việc tạo Launch Template Sau khi tạo thành công, nhấn View launch templates để xem lại \u0026ldquo;bản thiết kế\u0026rdquo; bạn vừa tạo trong danh sách. Xem Launch Template trong danh sách Bây giờ bạn đã có một bản thiết kế hoàn chỉnh. Bất cứ khi nào hệ thống cần một máy chủ web mới, nó chỉ cần sử dụng template này để tạo ra một bản sao hoàn hảo.\n"
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.8-createtargetgroup/",
	"title": "Tạo Target Group",
	"tags": [],
	"description": "",
	"content": "Khởi tạo Target Group ℹ️ Mục tiêu\nTarget Group (Nhóm mục tiêu) được sử dụng để gom nhóm các EC2 instance mà Application Load Balancer (ALB) sẽ chuyển hướng lưu lượng truy cập đến. ALB cũng sử dụng Target Group để thực hiện Health Check (Kiểm tra sức khỏe), đảm bảo rằng nó chỉ gửi yêu cầu đến các instance đang hoạt động bình thường. Chúng ta sẽ tạo một Target Group để quản lý tất cả các máy chủ web của dự án nhà hàng. 🔒 Các bước thực hiện\n1. Truy cập Target Groups Từ EC2 Dashboard, ở menu bên trái, cuộn xuống mục Load Balancing và chọn Target Groups. Nhấn vào Create target group. Bắt đầu tạo Target Group 2. Chọn loại Target Trong bước Choose a target type, chọn Instances, vì chúng ta muốn Load Balancer chuyển hướng traffic đến các EC2 instance. Nhấn Next. Chọn Target Type là Instances 3. Cấu hình chi tiết cho Target Group Target group name: ors-target-group Protocol - Port: Chọn HTTP và nhập 5000. Đây là port mà ứng dụng Node.js backend của chúng ta sẽ lắng nghe. VPC: Chọn ors-vpc. Health checks (Kiểm tra sức khỏe): Health check protocol: HTTP Health check path: /health. Health Check Path là gì? Đây là một đường dẫn (endpoint) đặc biệt mà bạn cần tạo trong code backend của mình. Application Load Balancer sẽ liên tục gửi request đến đường dẫn /health này. Nếu nhận được phản hồi thành công (HTTP 200 OK), nó sẽ coi instance đó là \u0026ldquo;khỏe mạnh\u0026rdquo; và tiếp tục gửi traffic người dùng đến. Nếu không, nó sẽ tạm ngưng gửi traffic để chờ instance phục hồi.\nĐiền thông tin cấu hình cho Target Group 4. Đăng ký Target ban đầu Ở bước này, chúng ta sẽ đăng ký instance ors-ec2 đã tạo thủ công vào Target Group. Trong bảng Available instances, chọn ors-ec2. Nhấn vào Include as pending below. Thao tác này sẽ đưa instance vào danh sách chờ để được đăng ký vào group. Tại sao lại đăng ký instance ban đầu? Việc này giúp chúng ta kiểm tra xem Load Balancer và Target Group có hoạt động chính xác hay không ngay sau khi cấu hình. Các instance được tạo sau này sẽ do Auto Scaling Group tự động đăng ký vào Target Group này.\nĐăng ký instance ors-ec2 vào Target Group 5. Hoàn tất và xem lại Cuộn xuống dưới và nhấn Create target group. Sau khi tạo thành công, bạn sẽ được đưa đến trang chi tiết của Target Group. Ban đầu, trạng thái Health status của instance có thể là initial hoặc unhealthy. Hãy đợi một vài phút để Load Balancer thực hiện health check, trạng thái sẽ chuyển sang healthy. Tạo Target Group thành công và kiểm tra trạng thái "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.9-createalb/",
	"title": "Tạo Application Load Balancer (ALB)",
	"tags": [],
	"description": "",
	"content": "Khởi tạo Application Load Balancer (ALB) ℹ️ Mục tiêu\nApplication Load Balancer (ALB) đóng vai trò là điểm tiếp nhận và phân phối lưu lượng truy cập từ người dùng đến các máy chủ backend. Bằng cách đặt ALB trong các Public Subnet trên nhiều Availability Zone (AZ), chúng ta đảm bảo ứng dụng có tính sẵn sàng cao (High Availability). Nếu một AZ gặp sự cố, ALB sẽ tự động chuyển hướng traffic đến các máy chủ ở AZ còn lại. ALB sẽ lắng nghe các yêu cầu đến và chuyển tiếp chúng đến Target Group (ors-target-group) mà chúng ta đã tạo ở bước trước. 🔒 Các bước thực hiện\n1. Bắt đầu tạo Load Balancer Từ EC2 Dashboard, ở menu bên trái, cuộn xuống mục Load Balancing và chọn Load Balancers. Nhấn vào Create load balancer. Bắt đầu tạo Load Balancer 2. Chọn loại Load Balancer Vì ứng dụng của chúng ta hoạt động trên lớp ứng dụng (HTTP/HTTPS), hãy chọn Application Load Balancer bằng cách nhấn Create. Chọn Application Load Balancer 3. Cấu hình thông tin cơ bản Load balancer name: ors-alb Scheme: Internet-facing (Vì ALB này sẽ nhận traffic trực tiếp từ Internet). IP address type: IPv4 Điền thông tin cấu hình cơ bản cho ALB 4. Cấu hình Network Mapping Đây là bước quan trọng để đảm bảo ALB hoạt động trên nhiều AZ và có thể truy cập được từ Internet. VPC: Chọn ors-vpc. Mappings: Chọn cả hai Availability Zone mà chúng ta đang sử dụng. Với mỗi AZ, hãy chọn Public Subnet tương ứng (ví dụ: subnet-public1 cho ap-southeast-1a và subnet-public2 cho ap-southeast-1b). Chọn VPC và các Public Subnet trên cả hai AZ 5. Cấu hình Security Group Trong mục Security groups, xóa Security Group default đang được chọn. Trong danh sách thả xuống, chọn Security Group đã tạo riêng cho Web Server: ors-sg. Chọn Security Group ors-sg cho ALB 6. Cấu hình Listeners and Routing Đây là nơi chúng ta định nghĩa cách ALB xử lý các yêu cầu đến. Listener: Giữ nguyên HTTP và Port 80. Default action: Trong danh sách thả xuống, chọn ors-target-group đã tạo ở bước trước. Thao tác này sẽ ra lệnh cho ALB chuyển tiếp tất cả traffic từ port 80 đến Target Group này. Cấu hình Listener và chuyển tiếp đến Target Group 7. Hoàn tất, kiểm tra trạng thái và truy cập thử Kiểm tra lại các thông tin trong phần Summary và nhấn Create load balancer. Sau khi tạo thành công, nhấn View load balancer. Lưu ý: Quá trình khởi tạo Load Balancer sẽ mất khoảng vài phút. Trạng thái của nó sẽ chuyển từ provisioning sang active. Hãy kiên nhẫn chờ đợi.\nChờ ALB chuyển sang trạng thái Active Khi ALB đã active, chọn vào nó và sao chép DNS name trong tab Details. Sao chép DNS name của ALB Dán DNS name này vào trình duyệt của bạn. Nếu mọi thứ được cấu hình chính xác và ứng dụng backend của bạn đang chạy trên instance ors-ec2, bạn sẽ thấy thông báo chào mừng từ API: Welcome to Dining Verse Backend API! Kết quả truy cập thành công qua DNS của ALB "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.10-createasg/",
	"title": "Tạo Auto Scaling Group (ASG)",
	"tags": [],
	"description": "",
	"content": "Khởi tạo Auto Scaling Group (ASG) ℹ️ Mục tiêu\nAuto Scaling Group (ASG) là trái tim của một kiến trúc linh hoạt trên AWS. Nhiệm vụ của nó là tự động điều chỉnh số lượng EC2 instance để đáp ứng nhu cầu lưu lượng truy cập. Khi traffic tăng, ASG sẽ tự động thêm instance mới (Scale Out). Khi traffic giảm, nó sẽ loại bỏ các instance không cần thiết (Scale In) để tiết kiệm chi phí. Chúng ta sẽ cấu hình một ASG sử dụng Launch Template (ors-launch-template) để biết cách tạo instance, và gắn nó với Load Balancer (thông qua Target Group) để biết khi nào cần hành động. 🔒 Các bước thực hiện\n1. Bắt đầu tạo Auto Scaling Group Từ EC2 Dashboard, ở menu bên trái, cuộn xuống dưới cùng và chọn Auto Scaling Groups. Nhấn vào Create Auto Scaling group. Bắt đầu tạo Auto Scaling Group 2. Chọn Launch Template và Đặt tên Auto Scaling group name: ors-asg Launch template: Chọn ors-launch-template từ danh sách. Sau khi chọn, nhấn Next. Đặt tên và chọn Launch Template 3. Cấu hình Network VPC: Chọn ors-vpc. Availability Zones and subnets: Chọn cả hai Public Subnet mà chúng ta có. ASG sẽ sử dụng các subnet này để khởi chạy instance mới, đảm bảo chúng được phân bổ đều trên hai AZ để tăng tính sẵn sàng. Nhấn Next. Cấu hình VPC và các Public Subnet 4. Tích hợp với Load Balancer Chọn Attach to an existing load balancer. Chọn Choose from your load balancer target groups. Trong danh sách thả xuống, chọn ors-target-group. Nhấn Next. Gắn ASG vào Target Group đã tồn tại 5. Cấu hình Quy mô và Chính sách Scaling Group size (Quy mô nhóm):\nDesired capacity: 1 (Số lượng instance mong muốn khi ASG được tạo). Minimum capacity: 1 (Luôn duy trì ít nhất 1 instance). Maximum capacity: 2 (Cho phép tạo tối đa 2 instance). Scaling policies (Chính sách mở rộng):\nChọn Target tracking scaling policy. Scaling policy name: Target Tracking Policy Metric type: Application Load Balancer request count per target. Target value: 30. Chính sách này hoạt động như thế nào? Bạn đang ra lệnh cho ASG: \u0026ldquo;Hãy theo dõi số lượng request trung bình mà mỗi EC2 instance phải xử lý. Nếu con số này vượt quá 30 request/phút, hãy tự động tạo thêm một instance mới (tối đa là 2) để san sẻ công việc. Ngược lại, nếu nó thấp hơn 30, hãy giảm bớt instance (tối thiểu là 1) để tiết kiệm tiền.\u0026rdquo;\nCấu hình quy mô và chính sách Scaling Nhấn Next cho đến khi bạn đến trang Review. 6. Review và Hoàn tất Kiểm tra lại tất cả các thông tin đã cấu hình trên trang Review. Cuộn xuống dưới và nhấn Create Auto Scaling group. Xem lại và tạo Auto Scaling Group 7. Kiểm tra kết quả Sau khi tạo xong, ASG sẽ xuất hiện trong danh sách. Chọn vào ors-asg và chuyển sang tab Instance management. Bạn sẽ thấy ASG đang trong quá trình khởi tạo một instance mới để đạt được Desired capacity là 1. Hãy đợi cho đến khi Lifecycle của instance là InService. Điều này cho thấy instance đã sẵn sàng hoạt động và đã được đăng ký thành công vào Target Group. Kiểm tra instance do ASG quản lý "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.11-creates3/",
	"title": "Tạo S3 Bucket cho Frontend",
	"tags": [],
	"description": "",
	"content": "Tạo S3 Bucket để lưu trữ Frontend ℹ️ Mục tiêu\nAmazon S3 (Simple Storage Service) là một dịch vụ lưu trữ đối tượng có khả năng mở rộng, độ bền cao và chi phí thấp. Chúng ta sẽ sử dụng S3 để lưu trữ toàn bộ các tệp tĩnh của ứng dụng frontend (HTML, CSS, JavaScript, hình ảnh). Sau đó, chúng ta sẽ cấu hình bucket này để hoạt động như một máy chủ web tĩnh (Static Website Hosting). 🔒 Các bước thực hiện\n1. Bắt đầu tạo S3 Bucket Trong AWS Management Console, tìm kiếm và chọn dịch vụ S3. Nhấn vào Create bucket. Bắt đầu tạo S3 Bucket 2. Cấu hình Bucket Bucket name: ors-fe Tên S3 bucket là duy nhất trên toàn cầu. Nếu tên `ors-fe` đã được người khác sử dụng, bạn cần thêm các ký tự hoặc số để làm cho nó trở nên độc nhất (ví dụ: `ors-fe-haminhtri-0309`).\rAWS Region: Chọn Region bạn đang làm việc.\nObject Ownership: Chọn ACLs enabled. Chúng ta cần bật Access Control Lists (ACL) để chuẩn bị cho các bước cấu hình truy cập công khai tạm thời hoặc khi tích hợp với một số dịch vụ khác. Đây là một bước cần thiết theo ghi chú của bạn.\rCấu hình tên, Region và bật ACLs Block Public Access settings for this bucket: Bỏ tích ở ô Block all public access. Tích vào ô xác nhận: I acknowledge that the current settings might result in this bucket and the objects within becoming public. Chúng ta tạm thời cho phép truy cập công khai để có thể kiểm tra trang web tĩnh sau khi cấu hình. Ở bước tạo CloudFront tiếp theo, chúng ta sẽ thiết lập Origin Access Identity (OAI) để bảo vệ bucket này một cách an toàn hơn, lúc đó bạn có thể bật lại Block all public access.\nBỏ chặn truy cập công khai cho bucket Bucket Versioning: Chọn Enable. Cuộn xuống và nhấn Create bucket. 3. Tải file Frontend lên Bucket Sau khi tạo bucket thành công, hãy vào bucket ors-fe. Nhấn Upload và tải toàn bộ các tệp và thư mục của dự án frontend của bạn lên. Tải các tệp Frontend lên S3 4. Cấp quyền truy cập công khai cho các đối tượng Sau khi tải lên hoàn tất, trong bucket, chọn tất cả các tệp và thư mục. Nhấn menu Actions và chọn Make public using ACL. Xác nhận bằng cách nhấn Make public. Cấp quyền đọc công khai cho các tệp đã tải lên 5. Cấu hình Static Website Hosting Trong bucket ors-fe, chuyển sang tab Properties. Cuộn xuống dưới cùng đến mục Static website hosting và nhấn Edit. Chọn Enable. Index document: index.html Nhấn Save changes. Bật và cấu hình Static Website Hosting Sau khi lưu, quay lại mục Static website hosting, bạn sẽ thấy một URL điểm cuối (endpoint). Bạn có thể truy cập URL này để kiểm tra xem trang web frontend đã hoạt động hay chưa. Lấy URL của trang web tĩnh để kiểm tra "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.12-createcloudfrontbe/",
	"title": "Tạo CloudFront cho Backend (ALB)",
	"tags": [],
	"description": "",
	"content": "Tạo Distribution CloudFront cho Backend ℹ️ Mục tiêu\nAmazon CloudFront là một dịch vụ mạng phân phối nội dung (CDN) giúp tăng tốc độ và bảo mật cho ứng dụng web. Trong bước này, chúng ta sẽ tạo một CloudFront distribution để làm \u0026ldquo;cổng vào\u0026rdquo; công khai cho backend API, thay vì để người dùng truy cập trực tiếp vào ALB. Lợi ích chính: HTTPS: CloudFront sẽ cung cấp một endpoint HTTPS an toàn cho người dùng. Nó sẽ giao tiếp với ALB qua HTTP trong mạng nội bộ của AWS, giúp đơn giản hóa việc quản lý chứng chỉ SSL. Hiệu suất: CloudFront đưa API của bạn đến gần người dùng hơn thông qua các điểm hiện diện (Edge Location) trên toàn cầu, giảm độ trễ. Bảo mật: Cung cấp một lớp bảo vệ bổ sung, che giấu địa chỉ thật của ALB và có thể tích hợp với AWS WAF (Web Application Firewall) sau này. 🔒 Các bước thực hiện\n1. Bắt đầu tạo Distribution Từ AWS Management Console, tìm kiếm và chọn dịch vụ CloudFront. Nhấn vào Create a CloudFront distribution. Bắt đầu tạo CloudFront Distribution 2. Cấu hình Origin (Nguồn) Origin domain: Nhấn vào ô và chọn DNS name của Application Load Balancer ors-alb từ danh sách thả xuống. Protocol: Chọn HTTP only. HTTP port: Để mặc định là 80. Luồng hoạt động: Người dùng --(HTTPS)--\u0026gt; CloudFront --(HTTP, port 80)--\u0026gt; ALB. CloudFront sẽ xử lý kết nối HTTPS an toàn, sau đó \u0026ldquo;nói chuyện\u0026rdquo; với ALB bằng HTTP thông thường.\nCấu hình Origin là Application Load Balancer 3. Cấu hình Default Cache Behavior Đây là phần cấu hình quan trọng nhất để đảm bảo API hoạt động đúng cách. Trong tab Behaviors, chọn Default (*) và nhấn Edit. Cache policy: Chọn CachingDisabled. Điều này rất quan trọng vì chúng ta không muốn CloudFront lưu cache các phản hồi của API (vốn có tính động và thay đổi liên tục). Origin request policy - optional: Chọn AllViewer. Chính sách này sẽ chuyển tiếp tất cả thông tin từ người dùng (headers, query strings, cookies) đến ALB, đảm bảo backend nhận được đầy đủ dữ liệu cần thiết để xử lý yêu cầu. Web Application Firewall (WAF): Chọn Do not enable security protections cho mục đích của workshop này. Nhấn Save changes. Cấu hình Cache Behavior cho API 4. Hoàn tất, triển khai và kiểm tra Cuộn xuống cuối trang và nhấn Create distribution. Quá trình triển khai một distribution ra toàn bộ mạng lưới của CloudFront có thể mất từ 5 đến 15 phút. Bạn sẽ thấy trạng thái Deploying. Chờ CloudFront hoàn tất triển khai Khi trạng thái chuyển sang hiển thị ngày Last modified, hãy sao chép Distribution domain name (ví dụ: d12345abcdef.cloudfront.net). Sao chép Domain Name của Distribution Dán domain name này vào trình duyệt của bạn. Kết quả trả về phải giống hệt như khi bạn truy cập qua DNS của ALB: Welcome to Dining Verse Backend API!. Điều này xác nhận CloudFront đã được cấu hình thành công để làm proxy cho ALB của bạn. "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.13-createcloudfrontfe/",
	"title": "Tạo CloudFront cho Frontend (S3)",
	"tags": [],
	"description": "",
	"content": "Tạo CloudFront Distribution cho Frontend (S3) ℹ️ Mục tiêu\nTạo một CloudFront Distribution thứ hai, lần này dành riêng cho việc phân phối các tệp tĩnh của frontend từ S3 bucket. Tăng tốc độ tải trang: CloudFront sẽ lưu trữ (cache) các tệp frontend (HTML, CSS, JS, images) tại các điểm biên (Edge Location) trên toàn cầu, giúp người dùng ở khắp nơi truy cập trang web với độ trễ thấp nhất. Tăng cường bảo mật: Chúng ta sẽ cấu hình Origin Access Identity (OAI). OAI là một \u0026ldquo;người dùng ảo\u0026rdquo; đặc biệt của CloudFront. Chúng ta sẽ cấp quyền cho OAI này đọc các tệp trong S3 bucket, sau đó khóa bucket lại, không cho phép bất kỳ truy cập công khai nào khác. Điều này đảm bảo mọi người dùng đều phải đi qua CloudFront để xem trang web của bạn. 🔒 Các bước thực hiện\n1. Bắt đầu tạo Distribution Trong AWS Management Console, quay trở lại dịch vụ CloudFront. Nhấn vào Create distribution. Bắt đầu tạo CloudFront Distribution mới 2. Cấu hình Origin (Nguồn) Origin domain: Nhấn vào ô này và chọn S3 bucket của bạn từ danh sách: ors-fe.s3.ap-southeast-1.amazonaws.com. Origin access: Đây là bước cấu hình bảo mật quan trọng nhất. Chọn Legacy access identities. Origin access identity: Nhấn vào Create new OAI. Để tên mặc định và nhấn Create. Bucket policy: Chọn Yes, update the bucket policy. Thao tác này sẽ tự động thêm một chính sách vào S3 bucket của bạn, cho phép OAI vừa tạo có quyền đọc các đối tượng. Ma thuật đã xảy ra! Khi bạn chọn \u0026ldquo;Yes, update the bucket policy\u0026rdquo;, CloudFront đã tự động sửa đổi chính sách của S3 bucket ors-fe, từ chối tất cả các truy cập trực tiếp và chỉ cho phép duy nhất OAI mà nó vừa tạo được phép vào.\nCấu hình Origin là S3 Bucket và tạo OAI 3. Cấu hình các mục còn lại Web Application Firewall (WAF): Chọn Do not enable security protections. Settings - Price Class: Chọn Use North America, Europe, Asia, Middle East, and Africa để tối ưu chi phí và hiệu năng. Settings - Default root object: Gõ index.html. Đây là một thiết lập bắt buộc. Nó cho CloudFront biết phải trả về tệp nào khi người dùng truy cập vào tên miền gốc (ví dụ: `https://d...cloudfront.net/`) mà không chỉ định một tệp cụ thể.\rThiết lập các cài đặt bổ sung 4. Hoàn tất, triển khai và kiểm tra Cuộn xuống dưới cùng và nhấn Create distribution. Tương tự như trước, quá trình triển khai sẽ mất vài phút. Hãy chờ cho đến khi trạng thái không còn là Deploying. Sao chép giá trị Distribution domain name. Sao chép Domain Name của Distribution Frontend Dán domain name này vào trình duyệt. Bạn sẽ thấy ứng dụng frontend của mình được tải lên thành công, nhanh chóng và an toàn thông qua mạng lưới của CloudFront! Giao diện người dùng được phân phối qua CloudFront "
},
{
	"uri": "http://localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]